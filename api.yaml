openapi: 3.0.3
info:
  title: Wallet - Swagger OpenAPI 3.0
  description: |-
    This is a GoIT group project by Swagger OpenAPI 3.0
  version: 1.0.0
servers:
  - url: http://localhost:4000/api
    description: local server
  - url: https://goit-wallet-back.onrender.com/api
    description: web server
tags:
  - name: user
    description: Operations about user
  - name: transactions
    description: Everything about your transaction
  - name: categories
    description: Operations about categories


paths:

  /users/signup:
    post:
      tags:
        - user
      summary: Register user into the system
      description: Register user without verify and send him email for verify
      operationId: registerUser
      requestBody:
        description: Registration
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: dmytro01@mail.com
                name:
                  type: string
                  example: Dmytro
                password:
                  type: string
                  example: 12341234dD
              required:
                - email
                - name
                - password
      responses:
        '201':
          description: successful operation, user added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 63ae03618abaf4e28f8b6de0
                      email:
                        type: string
                        example: dmytro01@mail.com
                      name:
                        type: string
                        example: Dmytro
                  message:
                    type: string
                    example: "User by id: ${user._id} has been created"
        '409':
          description: "Email has been used"

  /users/signin:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Authorization
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: dmytro01@mail.com
                password:
                  type: string
                  example: 12341234dD
              required:
                - email
                - password
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Dmytro"
                      email:
                        type: string
                        example: dmytro01@mail.com
                      balance:
                        type: number
                        example: 0,
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzYTc1MzFmNzE2NTUzMDNiMDRlNzlmNSIsImlhdCI6MTY3MjM0OTI1NCwiZXhwIjoxNjcyMzUyODU0fQ.Je08KoEnthe8OYMKlhVN7KXix-Qzz5bDC3hPOjKqf2I
                  message:
                    type: string
                    example: "User by id: 63a7531f71655303b04e79f5 has been authorized"
        '401':
          description: Email or password or verification is wrong

  /users/signout:
    post:
      tags:
        - user
      summary: Logout user
      description: ''
      operationId: logoutUser
      responses:
        '204':
          description: successful operation
        '401':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not authorized"
      security:
        - BearerAuth: [ ]

  /users/current:
    get:
      tags:
        - user
      summary: Get user information by token
      description: ''
      operationId: getUserInformationByToken
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: 63d5655cfbdc957b26ccedfa
                      id:
                        type: string
                        example: dmytro01@mail.com
                      name:
                        type: string
                        example: Dmytro
                      balance:
                        type: number
                        example: 0
      security:
        - BearerAuth: [ ]

  /transactions:

    get:
      tags:
        - transactions
      summary: Return all transitions
      description: Return all transitions by authorized User
      operationId: getAllTransitions
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/getAllTransitions'
        '401':
          $ref: '#/components/responses/401'
      security:
        - BearerAuth: []

    post:
      tags:
        - transactions
      summary: Add new transaction
      description: Add new contact by authorized User
      operationId: addItemTransitions
      requestBody:
        
        description: The transaction to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBodyTransaction'

      # requestBody:
      #   $ref: '#/components/requestBodies/Transition'
      responses:
        '200':
          description: Successful operation, return new transition
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      transition:
                        $ref: '#/components/schemas/Transition'
                  message:
                    type: string
                    example: 'Transition by id: {transition._id} has been added'
        '400':
          description: invalid authorization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Body: \"date\" is required"
        '401':
          $ref: '#/components/responses/401'
      security:
        - BearerAuth: []

  /transactions/{contactId}:
    get:
      tags:
        - transactions
      summary: Find contact by Id
      description: Find contact by Id
      operationId: getContactById
      responses:
        '200':
          description: Successful operation, return contact what found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      contact:
                        $ref: '#/components/schemas/Transition'
                  message:
                    type: string
                    example: "Contact by id: {{$response.body#/data/transition._id}} has been added"
          links:
            GetUserById:
              description: get user by id description
              operationId: getUser
        '404':
          description: "Contact by id: {contactId} hasn't been found"
      security:
        - BearerAuth: []
    delete:
      tags:
        - contact
      summary: Delete contact by Id
      description: Delete contact by Id
      operationId: deleteContactById
      responses:
        '200':
          description: Successful operation, return contact what found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      contact:
                        $ref: '#/components/schemas/Contact'
                  message:
                    type: string
                    example: "Contact by id: ${contactId} has been deleted"
          links:
            GetUserById:
              description: get user by id description
              operationId: getUser
        '404':
          description: "Contact by id: ${contactId} hasn't been found"
      security:
        - BearerAuth: []
    put:
      tags:
        - contact
      summary: Update contact by Id
      description: Update contact by Id
      operationId: putContactsById
      responses:
        '200':
          description: Successful operation, return contact what found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      contact:
                        $ref: '#/components/schemas/Contact'
                  message:
                    type: string
                    example: "Contact by id: ${contact.id} has been update"
          links:
            GetUserById:
              description: get user by id description
              operationId: getUser
        '404':
          description: "Contact by id: ${contactId} hasn't been found"
      security:
        - BearerAuth: []

  /transactions/{contactId}/favorite:
    patch:
      tags:
        - transactions
      summary: Update contact favorite by Id
      description: Update contact favorite by Id
      operationId: patchContactsFavoriteById
      responses:
        '200':
          description: Successful operation, return contact what updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      contact:
                        $ref: '#/components/schemas/Contact'
                  message:
                    type: string
                    example: "Contact favorite by id: ${contact.id} has been update"
          links:
            GetUserById:
              description: get user by id description
              operationId: getUser
        '404':
          description: "Contact by id: ${contactId} hasn't been found"
      security:
        - BearerAuth: [ ]


components:
  schemas:
    Transition:
      type: object
      properties:
        _id:
          type: string
          example: 63d66c6390792a579a81e189
        date:
          type: string
          example: '2021-02-28T00:00:00.000Z'
        type:
          type: boolean
          example: false
        category:
          type: string
          example: 63d2548b350d2f7f3413914b
          description: category ID
        comment:
          type: string
          example: Any comment of owner
        owner:
          $ref: '#/components/schemas/User'
      xml:
        name: contact
    RequestBodyTransaction:
      type: object
      properties:
        date:
          type: string
          format: date
          example: '2021-02-28'
          required: true
        type:
          type: boolean
          example: true
        category:
          type: string
          description: category ID
          example: 63d2548b350d2f7f3413914b
        comment:
          type: string
          example: Nick comment expensive
        sum:
          type: number
          example: 16
    User:
      type: object
      properties:
        _id:
          type: string
          example: 63a56a3008692c79628e64fa
        email:
          type: string
          example: dmytro01@mail.com
        name:
          type: string
          example: Dmytro
        password:
          type: string
          example: 12341234dF
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzYTc1MzFmNzE2NTUzMDNiMDRlNzlmNSIsImlhdCI6MTY3MjIzOTkwNywiZXhwIjoxNjcyMjQzNTA3fQ.hJ6Ey-HYaCM6uvDinn1WXd9Q_ZQ8_UU3-VxypPGMYhc
        avatarURLType:
          type: string
          enum: [default, local, web]
          example: 'local'
        avatarURL:
          type: string
          example: avatars/default.png
        verify:
          type: boolean
          example: false
        verificationToken:
          type: string
          example: 9sJsOiz8VsLqiVsmvvRUa
      xml:
        name: user
  parameters:
    page:
      in: query
      name: page
      required: false
      schema:
        type: integer
        minimum: 1
        example: 1
        default: 1
    limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        example: 12
        default: 12
  responses:
    getAllTransitions:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  status: 
                    type: string
                    example: success
                  code: 
                    type: number
                    example: 200
                  transitions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transition'
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 12
                  length:
                    type: number
                    example: 26
    '401':
      description: invalid authorization
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not authorized"
    TransitionAdd:
      description: Add new contact
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Nick
              email:
                type: string
                example: mail.nick@mail.com
              phone:
                type: string
                example: 12341234
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
